[
  {
    "filePath": "/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/App.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'handleProcess', 'model', and 'processedFrame'. Either include them or remove the dependency array.",
        "line": 86,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 86,
        "endColumn": 60,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [pixelSettings.targetSize, pixelSettings.colorPalette, model, processedFrame, handleProcess]",
            "fix": {
              "range": [
                2544,
                2598
              ],
              "text": "[pixelSettings.targetSize, pixelSettings.colorPalette, model, processedFrame, handleProcess]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// src/App.tsx (version corrigée - sans le CSS à la fin)\nimport { useState, useCallback, useEffect } from 'react';\nimport { AppProvider, useAppContext } from '../ui/contexts/AppContext';\nimport {\n  ModelViewer3D,\n  PixelPreview,\n  FileUpload,\n  PresetSelector,\n  SettingsPanel,\n} from '../ui/components';\nimport { useModelLoader } from \"@ui/hooks/useModelLoader\";\nimport { usePixelProcessor } from \"@ui/hooks/usePixelProcessor\";\nimport { useExporter } from \"@ui/hooks/useExporter\";\nimport { ThreeRenderer } from '@rendering/three-renderer';\nimport { Download, Settings, Camera, Grid3x3 } from 'lucide-react';\n\nfunction AppContent() {\n  const {\n    model,\n    setModel,\n    camera,\n    setCamera,\n    cameraPresets,\n    selectedPresetId,\n    applyPreset,\n    renderSettings,\n    pixelSettings,\n    setPixelSettings,\n    exportSettings,\n    setExportSettings,\n    processedFrames,\n    setProcessedFrames,\n  } = useAppContext();\n\n  const { loadModel } = useModelLoader();\n  const { processImage, processedFrame, isProcessing } = usePixelProcessor();\n  const { exportFrames, isExporting } = useExporter();\n\n  const [renderer] = useState(() => new ThreeRenderer());\n  const [activeTab, setActiveTab] = useState<'model' | 'settings'>('model');\n  const [showGrid, setShowGrid] = useState(true);\n\n  // Handle file upload\n  const handleFileSelect = useCallback(async (file: File) => {\n    const loadedModel = await loadModel(file);\n    if (loadedModel) {\n      setModel(loadedModel);\n    }\n  }, [loadModel, setModel]);\n\n  // Process current view\n  const handleProcess = useCallback(async () => {\n    if (!model) return;\n\n    // Create render canvas\n    const canvas = document.createElement('canvas');\n    canvas.width = 512;\n    canvas.height = 512;\n\n    // Initialize renderer\n    renderer.initialize(canvas);\n    renderer.updateSettings(renderSettings);\n\n    // Render frame\n    const result = renderer.render(model, camera);\n\n    // Process to pixel art\n    const processed = await processImage(result.image, pixelSettings);\n    if (processed) {\n      setProcessedFrames([processed]);\n    }\n  }, [model, camera, renderSettings, pixelSettings, renderer, processImage, setProcessedFrames]);\n\n  // Export spritesheet\n  const handleExport = useCallback(async () => {\n    if (processedFrames.length === 0) return;\n\n    await exportFrames(processedFrames, exportSettings);\n  }, [processedFrames, exportSettings, exportFrames]);\n\n  // Auto-process on settings change\n  useEffect(() => {\n    if (model && processedFrame) {\n      handleProcess();\n    }\n  }, [pixelSettings.targetSize, pixelSettings.colorPalette]);\n\n  return (\n      <div className=\"min-h-screen bg-gray-900 text-white\">\n        {/* Header */}\n        <header className=\"bg-gray-800 shadow-lg\">\n          <div className=\"container mx-auto px-4 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text text-transparent\">\n                  3D to Pixel Art Converter\n                </h1>\n                <p className=\"text-gray-400 text-sm\">Transform 3D models into retro sprites</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <button\n                    onClick={() => setShowGrid(!showGrid)}\n                    className=\"p-2 rounded hover:bg-gray-700 transition-colors\"\n                    title=\"Toggle grid\"\n                >\n                  <Grid3x3 className=\"w-5 h-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"container mx-auto px-4 py-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Left Panel - Model/Settings */}\n            <div className=\"lg:col-span-1 space-y-6\">\n              {!model ? (\n                  <div className=\"bg-gray-800 rounded-lg p-6 shadow-xl\">\n                    <h2 className=\"text-xl font-semibold mb-4\">Upload Model</h2>\n                    <FileUpload\n                        accept=\".glb,.gltf\"\n                        onFileSelect={handleFileSelect}\n                        maxSize={50}\n                    />\n                  </div>\n              ) : (\n                  <div className=\"bg-gray-800 rounded-lg shadow-xl\">\n                    <div className=\"flex border-b border-gray-700\">\n                      <button\n                          onClick={() => setActiveTab('model')}\n                          className={`flex-1 px-4 py-3 font-medium transition-colors ${\n                              activeTab === 'model'\n                                  ? 'text-purple-400 border-b-2 border-purple-400'\n                                  : 'text-gray-400 hover:text-white'\n                          }`}\n                      >\n                        <Camera className=\"w-4 h-4 inline mr-2\" />\n                        View\n                      </button>\n                      <button\n                          onClick={() => setActiveTab('settings')}\n                          className={`flex-1 px-4 py-3 font-medium transition-colors ${\n                              activeTab === 'settings'\n                                  ? 'text-purple-400 border-b-2 border-purple-400'\n                                  : 'text-gray-400 hover:text-white'\n                          }`}\n                      >\n                        <Settings className=\"w-4 h-4 inline mr-2\" />\n                        Settings\n                      </button>\n                    </div>\n\n                    <div className=\"p-6\">\n                      {activeTab === 'model' ? (\n                          <div className=\"space-y-6\">\n                            <div>\n                              <h3 className=\"text-lg font-semibold mb-4\">Camera Presets</h3>\n                              <PresetSelector\n                                  presets={cameraPresets}\n                                  selectedPresetId={selectedPresetId}\n                                  onPresetSelect={applyPreset}\n                              />\n                            </div>\n\n                            <div>\n                              <p className=\"text-sm text-gray-400 mb-2\">\n                                Model: {model.meshes.length} meshes, {model.animations.length} animations\n                              </p>\n                              <button\n                                  onClick={() => setModel(null)}\n                                  className=\"text-sm text-red-400 hover:text-red-300\"\n                              >\n                                Remove model\n                              </button>\n                            </div>\n                          </div>\n                      ) : (\n                          <SettingsPanel\n                              pixelSettings={pixelSettings}\n                              exportSettings={exportSettings}\n                              onPixelSettingsChange={setPixelSettings}\n                              onExportSettingsChange={setExportSettings}\n                          />\n                      )}\n                    </div>\n                  </div>\n              )}\n            </div>\n\n            {/* Center - 3D Viewer */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-gray-800 rounded-lg p-6 shadow-xl\">\n                <h2 className=\"text-xl font-semibold mb-4\">3D Model</h2>\n                <ModelViewer3D\n                    model={model}\n                    camera={camera}\n                    width={400}\n                    height={400}\n                    showHelpers={showGrid}\n                    onCameraChange={setCamera}\n                />\n              </div>\n            </div>\n\n            {/* Right - Pixel Preview */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-gray-800 rounded-lg p-6 shadow-xl\">\n                <h2 className=\"text-xl font-semibold mb-4\">Pixel Art Preview</h2>\n                <div className=\"flex justify-center\">\n                  <PixelPreview\n                      frame={processedFrames[0] || null}\n                      scale={4}\n                      showGrid={showGrid}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"mt-8 flex justify-center space-x-4\">\n            <button\n                onClick={handleProcess}\n                disabled={!model || isProcessing}\n                className=\"bg-purple-600 hover:bg-purple-700 disabled:bg-gray-700 disabled:text-gray-500 text-white font-bold py-3 px-8 rounded-lg shadow-lg transform transition hover:scale-105 disabled:hover:scale-100\"\n            >\n              {isProcessing ? 'Processing...' : 'Generate Pixel Art'}\n            </button>\n\n            <button\n                onClick={handleExport}\n                disabled={processedFrames.length === 0 || isExporting}\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 disabled:from-gray-700 disabled:to-gray-700 disabled:text-gray-500 text-white font-bold py-3 px-8 rounded-lg shadow-lg transform transition hover:scale-105 disabled:hover:scale-100 flex items-center\"\n            >\n              <Download className=\"w-5 h-5 mr-2\" />\n              {isExporting ? 'Exporting...' : 'Download Spritesheet'}\n            </button>\n          </div>\n        </main>\n      </div>\n  );\n}\n\nfunction App() {\n  return (\n      <AppProvider>\n        <AppContent />\n      </AppProvider>\n  );\n}\n\nexport default App;\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/main.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/three.d.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AnimationClip' is defined but never used.",
        "line": 2,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'LoadingManager' is defined but never used.",
        "line": 2,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Scene' is defined but never used.",
        "line": 2,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 45
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// 3. Fix pour src/three.d.ts - Remplacer les types vides {}\nimport {AnimationClip, LoadingManager, Scene} from \"three\";\n\ndeclare module 'three/examples/jsm/controls/OrbitControls' {\n  import { Camera, EventDispatcher, MOUSE, Vector3 } from 'three';\n\n  export interface OrbitControlsEventMap {\n    change: Record<string, never>;\n    start: Record<string, never>;\n    end: Record<string, never>;\n  }\n\n  export class OrbitControls extends EventDispatcher<OrbitControlsEventMap> {\n    constructor(object: Camera, domElement?: HTMLElement);\n\n    object: Camera;\n    domElement: HTMLElement | Document;\n\n    // API\n    enabled: boolean;\n    target: Vector3;\n\n    minDistance: number;\n    maxDistance: number;\n\n    minZoom: number;\n    maxZoom: number;\n\n    minPolarAngle: number;\n    maxPolarAngle: number;\n\n    minAzimuthAngle: number;\n    maxAzimuthAngle: number;\n\n    enableDamping: boolean;\n    dampingFactor: number;\n\n    enableZoom: boolean;\n    zoomSpeed: number;\n\n    enableRotate: boolean;\n    rotateSpeed: number;\n\n    enablePan: boolean;\n    panSpeed: number;\n    screenSpacePanning: boolean;\n    keyPanSpeed: number;\n\n    autoRotate: boolean;\n    autoRotateSpeed: number;\n\n    enableKeys: boolean;\n    keys: { LEFT: string; UP: string; RIGHT: string; BOTTOM: string };\n    mouseButtons: { LEFT: MOUSE; MIDDLE: MOUSE; RIGHT: MOUSE };\n\n    update(): void;\n\n    saveState(): void;\n\n    reset(): void;\n\n    dispose(): void;\n\n    getPolarAngle(): number;\n\n    getAzimuthalAngle(): number;\n\n    listenToKeyEvents(domElement: HTMLElement): void;\n\n    stopListenToKeyEvents(): void;\n  }\n}\n\ndeclare module 'three/examples/jsm/loaders/GLTFLoader' {\n  import { LoadingManager, Camera, Scene, AnimationClip } from 'three';\n\n  export interface GLTF {\n    animations: AnimationClip[];\n    scene: Scene;\n    scenes: Scene[];\n    cameras: Camera[];\n    asset: {\n      generator?: string;\n      version?: string;\n    };\n  }\n\n  export class GLTFLoader {\n    constructor(manager?: LoadingManager);\n\n    load(\n        url: string,\n        onLoad: (gltf: GLTF) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (event: ErrorEvent) => void\n    ): void;\n\n    parse(\n        data: ArrayBuffer | string,\n        path: string,\n        onLoad: (gltf: GLTF) => void,\n        onError?: (event: ErrorEvent) => void\n    ): void;\n  }\n}\n",
    "usedDeprecatedRules": []
  }
]