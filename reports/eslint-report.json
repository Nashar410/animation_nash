[{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/CameraManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/__tests__/CameraManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/__tests__/PresetFactory.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/__tests__/Presets.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/presets/BasePreset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/presets/ChronoTriggerPreset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/presets/FFPreset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/presets/IPreset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/presets/PokemonPreset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/presets/PresetFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/camera-system/presets/ZeldaPreset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/exporter/Exporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/exporter/ExporterFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/exporter/JSONExporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/exporter/PNGExporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/exporter/WebPExporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/exporter/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/model-loader/GLBLoader.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1567,1570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1567,1570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1727,1730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1727,1730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1775,1778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1775,1778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1873,1876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1873,1876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5084,5087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5084,5087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n// core/model-loader/GLBLoader.ts\r\nimport * as THREE from 'three';\r\nimport { ModelLoader } from './ModelLoader';\r\nimport {\r\n    Model3D,\r\n    Mesh,\r\n    Material,\r\n    Animation,\r\n    AnimationChannel,\r\n    AnimationKeyframe,\r\n    BoundingBox,\r\n    Vector3,\r\n    Quaternion,\r\n    Texture\r\n} from '@shared/types/models';\r\nimport {generateId} from \"@shared/utils/id.ts\";\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n\r\nexport class GLBLoader extends ModelLoader {\r\n    private loader: GLTFLoader;\r\n\r\n    constructor() {\r\n        super('GLB');\r\n        this.loader = new GLTFLoader();\r\n    }\r\n\r\n    getSupportedFormats(): string[] {\r\n        return ['.glb', '.gltf'];\r\n    }\r\n\r\n    async loadModel(file: File): Promise<Model3D> {\r\n        this.logger.info('Loading GLB/GLTF file', { name: file.name, size: file.size });\r\n\r\n        try {\r\n            const arrayBuffer = await this.readFileAsArrayBuffer(file);\r\n            const gltf = await this.loadGLTF(arrayBuffer);\r\n\r\n            const model = this.convertGLTFToModel(gltf, file.name);\r\n\r\n            const validation = this.validateModel(model);\r\n            if (!validation.valid) {\r\n                this.logger.error('Model validation failed', validation.errors);\r\n                throw new Error('Invalid model: ' + validation.errors[0].message);\r\n            }\r\n\r\n            return model;\r\n        } catch (error) {\r\n            this.logger.error('Failed to load GLB file', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private loadGLTF(buffer: ArrayBuffer): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.loader.parse(\r\n                buffer,\r\n                '',\r\n                (gltf: any) => resolve(gltf),\r\n                (error: any) => reject(error)\r\n            );\r\n        });\r\n    }\r\n\r\n    private convertGLTFToModel(gltf: any, _filename: string): Model3D {\r\n        const modelId = generateId('model');\r\n        const meshes: Mesh[] = [];\r\n        const materials: Material[] = [];\r\n        const animations: Animation[] = [];\r\n        const textures = new Map<THREE.Texture, Texture>();\r\n\r\n        // Extract textures\r\n        gltf.scene.traverse((node: THREE.Object3D) => {\r\n            if (node instanceof THREE.Mesh) {\r\n                const material = node.material as THREE.MeshStandardMaterial;\r\n                if (material.map && !textures.has(material.map)) {\r\n                    const texture: Texture = {\r\n                        id: generateId('texture'),\r\n                        url: material.map.source.data?.src || '',\r\n                        width: material.map.image?.width || 0,\r\n                        height: material.map.image?.height || 0,\r\n                    };\r\n                    textures.set(material.map, texture);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Extract meshes and materials\r\n        gltf.scene.traverse((node: THREE.Object3D) => {\r\n            if (node instanceof THREE.Mesh) {\r\n                const mesh = this.convertThreeMesh(node);\r\n                meshes.push(mesh);\r\n\r\n                const material = this.convertThreeMaterial(\r\n                    node.material as THREE.MeshStandardMaterial,\r\n                    textures\r\n                );\r\n                if (material && !materials.find(m => m.id === material.id)) {\r\n                    materials.push(material);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Extract animations\r\n        if (gltf.animations && gltf.animations.length > 0) {\r\n            gltf.animations.forEach((clip: THREE.AnimationClip) => {\r\n                const animation = this.convertThreeAnimation(clip);\r\n                animations.push(animation);\r\n            });\r\n        }\r\n\r\n        // Calculate bounds\r\n        const bounds = this.calculateBounds(gltf.scene);\r\n\r\n        return {\r\n            id: modelId,\r\n            meshes,\r\n            materials,\r\n            animations,\r\n            bounds,\r\n            metadata: {\r\n                format: 'GLTF',\r\n                version: '2.0',\r\n                generator: gltf.asset?.generator,\r\n                created: new Date(),\r\n            },\r\n        };\r\n    }\r\n\r\n    private convertThreeMesh(threeMesh: THREE.Mesh): Mesh {\r\n        const geometry = threeMesh.geometry;\r\n        const positions = geometry.attributes.position.array as Float32Array;\r\n        const normals = geometry.attributes.normal?.array as Float32Array || new Float32Array(positions.length);\r\n        const uvs = geometry.attributes.uv?.array as Float32Array || new Float32Array((positions.length / 3) * 2);\r\n        const indices = geometry.index?.array || this.generateIndices(positions.length / 3);\r\n\r\n        return {\r\n            id: generateId('mesh'),\r\n            name: threeMesh.name || 'Mesh',\r\n            vertices: positions,\r\n            normals,\r\n            uvs,\r\n            indices: indices instanceof Uint16Array || indices instanceof Uint32Array\r\n                ? indices\r\n                : new Uint32Array(indices),\r\n            materialId: (threeMesh.material as any).uuid,\r\n        };\r\n    }\r\n\r\n    private convertThreeMaterial(\r\n        threeMaterial: THREE.MeshStandardMaterial,\r\n        textures: Map<THREE.Texture, Texture>\r\n    ): Material {\r\n        return {\r\n            id: threeMaterial.uuid,\r\n            name: threeMaterial.name || 'Material',\r\n            color: {\r\n                r: threeMaterial.color.r * 255,\r\n                g: threeMaterial.color.g * 255,\r\n                b: threeMaterial.color.b * 255,\r\n                a: threeMaterial.opacity * 255,\r\n            },\r\n            texture: threeMaterial.map ? textures.get(threeMaterial.map) : undefined,\r\n            opacity: threeMaterial.opacity,\r\n            metalness: threeMaterial.metalness,\r\n            roughness: threeMaterial.roughness,\r\n        };\r\n    }\r\n\r\n    private convertThreeAnimation(clip: THREE.AnimationClip): Animation {\r\n        const channels: AnimationChannel[] = [];\r\n\r\n        clip.tracks.forEach((track: THREE.KeyframeTrack) => {\r\n            const [targetId, property] = this.parseTrackName(track.name);\r\n\r\n            if (property === 'position' || property === 'rotation' || property === 'scale') {\r\n                const keyframes: AnimationKeyframe[] = [];\r\n\r\n                for (let i = 0; i < track.times.length; i++) {\r\n                    const time = track.times[i];\r\n                    const value = this.extractKeyframeValue(track, i, property);\r\n\r\n                    keyframes.push({ time, value });\r\n                }\r\n\r\n                channels.push({\r\n                    targetId,\r\n                    property,\r\n                    keyframes,\r\n                });\r\n            }\r\n        });\r\n\r\n        return {\r\n            id: generateId('animation'),\r\n            name: clip.name || 'Animation',\r\n            duration: clip.duration,\r\n            channels,\r\n        };\r\n    }\r\n\r\n    private parseTrackName(name: string): [string, 'position' | 'rotation' | 'scale'] {\r\n        const parts = name.split('.');\r\n        const targetId = parts[0];\r\n        const property = parts[parts.length - 1].toLowerCase();\r\n\r\n        if (property.includes('position')) return [targetId, 'position'];\r\n        if (property.includes('quaternion') || property.includes('rotation')) return [targetId, 'rotation'];\r\n        if (property.includes('scale')) return [targetId, 'scale'];\r\n\r\n        return [targetId, 'position'];\r\n    }\r\n\r\n    private extractKeyframeValue(\r\n        track: THREE.KeyframeTrack,\r\n        index: number,\r\n        property: string\r\n    ): Vector3 | Quaternion | number {\r\n        const values = track.values;\r\n        const stride = track.getValueSize();\r\n        const offset = index * stride;\r\n\r\n        if (property === 'rotation' && stride === 4) {\r\n            return {\r\n                x: values[offset],\r\n                y: values[offset + 1],\r\n                z: values[offset + 2],\r\n                w: values[offset + 3],\r\n            } as Quaternion;\r\n        } else if (stride === 3) {\r\n            return {\r\n                x: values[offset],\r\n                y: values[offset + 1],\r\n                z: values[offset + 2],\r\n            } as Vector3;\r\n        } else {\r\n            return values[offset];\r\n        }\r\n    }\r\n\r\n    private calculateBounds(scene: THREE.Scene): BoundingBox {\r\n        const box = new THREE.Box3().setFromObject(scene);\r\n\r\n        return {\r\n            min: {\r\n                x: box.min.x,\r\n                y: box.min.y,\r\n                z: box.min.z,\r\n            },\r\n            max: {\r\n                x: box.max.x,\r\n                y: box.max.y,\r\n                z: box.max.z,\r\n            },\r\n            center: {\r\n                x: (box.min.x + box.max.x) / 2,\r\n                y: (box.min.y + box.max.y) / 2,\r\n                z: (box.min.z + box.max.z) / 2,\r\n            },\r\n            size: {\r\n                x: box.max.x - box.min.x,\r\n                y: box.max.y - box.min.y,\r\n                z: box.max.z - box.min.z,\r\n            },\r\n        };\r\n    }\r\n\r\n    private generateIndices(vertexCount: number): Uint32Array {\r\n        const indices = new Uint32Array(vertexCount);\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            indices[i] = i;\r\n        }\r\n        return indices;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n        // Three.js loader doesn't need explicit disposal\r\n    }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/model-loader/ModelLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/model-loader/ModelLoaderFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/model-loader/__tests__/GLBLoader.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2501,2504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2501,2504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// core/model-loader/__tests__/GLBLoader.test.ts\r\nimport { GLBLoader } from '../GLBLoader';\r\nimport * as THREE from 'three';\r\n\r\n// Mock Three.js\r\njest.mock('three', () => ({\r\n    ...jest.requireActual('three'),\r\n    Box3: jest.fn().mockImplementation(() => ({\r\n        setFromObject: jest.fn().mockReturnThis(),\r\n        min: new (jest.requireActual('three')).Vector3(0, 0, 0),\r\n        max: new (jest.requireActual('three')).Vector3(1, 1, 1),\r\n    })),\r\n}));\r\n\r\njest.mock('three/examples/jsm/loaders/GLTFLoader', () => ({\r\n    GLTFLoader: jest.fn().mockImplementation(() => ({\r\n        parse: jest.fn((_buffer, _path, onLoad, _onError) => {\r\n            // Simulate successful GLTF loading\r\n            const mockScene = new THREE.Scene();\r\n            const mockMesh = new THREE.Mesh(\r\n                new THREE.BoxGeometry(1, 1, 1),\r\n                new THREE.MeshStandardMaterial({ color: 0xffffff })\r\n            );\r\n            mockScene.add(mockMesh);\r\n\r\n            onLoad({\r\n                scene: mockScene,\r\n                animations: [],\r\n                asset: { version: '2.0', generator: 'Mock' },\r\n            });\r\n        }),\r\n    })),\r\n}));\r\n\r\ndescribe('GLBLoader', () => {\r\n    let loader: GLBLoader;\r\n\r\n    beforeEach(() => {\r\n        loader = new GLBLoader();\r\n    });\r\n\r\n    afterEach(() => {\r\n        loader.dispose();\r\n    });\r\n\r\n    describe('getSupportedFormats', () => {\r\n        it('should return supported formats', () => {\r\n            const formats = loader.getSupportedFormats();\r\n            expect(formats).toContain('.glb');\r\n            expect(formats).toContain('.gltf');\r\n        });\r\n    });\r\n\r\n    describe('loadModel', () => {\r\n        it('should load a valid GLB file', async () => {\r\n            const mockGLBContent = new ArrayBuffer(100);\r\n            const file = new File([mockGLBContent], 'test.glb', {type: 'model/gltf-binary'});\r\n\r\n            const model = await loader.loadModel(file);\r\n\r\n            expect(model).toBeDefined();\r\n            expect(model.id).toBeTruthy();\r\n            expect(model.meshes.length).toBeGreaterThan(0);\r\n            expect(model.metadata.format).toBe('GLTF');\r\n        });\r\n\r\n        it('should handle invalid file', async () => {\r\n            const file = new File(['invalid content'], 'test.glb');\r\n\r\n            // Mock parse to fail\r\n            const mockParse = jest.fn((_buffer, _path, _onLoad, onError) => {\r\n                onError(new Error('Invalid GLB file'));\r\n            });\r\n\r\n            (loader as any).loader.parse = mockParse;\r\n\r\n            await expect(loader.loadModel(file)).rejects.toThrow();\r\n        });\r\n    });\r\n});","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/model-loader/__tests__/ModelLoader.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3096,3099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3096,3099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// core/model-loader/__tests__/ModelLoader.test.ts\r\nimport { ModelLoader } from '../ModelLoader';\r\nimport { Model3D } from '@shared/types/models';\r\n\r\n// Mock implementation for testing\r\nclass MockModelLoader extends ModelLoader {\r\n    constructor() {\r\n        super('Mock');\r\n    }\r\n\r\n    async loadModel(_file: File): Promise<Model3D> {\r\n        return {\r\n            id: 'test-model',\r\n            meshes: [{\r\n                id: 'test-mesh',\r\n                name: 'TestMesh',\r\n                vertices: new Float32Array([0, 0, 0, 1, 0, 0, 0, 1, 0]),\r\n                normals: new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1]),\r\n                uvs: new Float32Array([0, 0, 1, 0, 0, 1]),\r\n                indices: new Uint16Array([0, 1, 2]),\r\n            }],\r\n            materials: [],\r\n            animations: [],\r\n            bounds: {\r\n                min: { x: 0, y: 0, z: 0 },\r\n                max: { x: 1, y: 1, z: 0 },\r\n                center: { x: 0.5, y: 0.5, z: 0 },\r\n                size: { x: 1, y: 1, z: 0 },\r\n            },\r\n            metadata: {\r\n                format: 'mock',\r\n                created: new Date(),\r\n            },\r\n        };\r\n    }\r\n\r\n    getSupportedFormats(): string[] {\r\n        return ['.mock'];\r\n    }\r\n}\r\n\r\ndescribe('ModelLoader', () => {\r\n    let loader: MockModelLoader;\r\n\r\n    beforeEach(() => {\r\n        loader = new MockModelLoader();\r\n    });\r\n\r\n    afterEach(() => {\r\n        loader.dispose();\r\n    });\r\n\r\n    describe('validateModel', () => {\r\n        it('should validate a valid model', async () => {\r\n            const file = new File([''], 'test.mock');\r\n            const model = await loader.loadModel(file);\r\n            const result = loader.validateModel(model);\r\n\r\n            expect(result.valid).toBe(true);\r\n            expect(result.errors).toHaveLength(0);\r\n        });\r\n\r\n        it('should detect invalid model with no meshes', () => {\r\n            const invalidModel: Model3D = {\r\n                id: 'invalid',\r\n                meshes: [],\r\n                materials: [],\r\n                animations: [],\r\n                bounds: {\r\n                    min: { x: 0, y: 0, z: 0 },\r\n                    max: { x: 0, y: 0, z: 0 },\r\n                    center: { x: 0, y: 0, z: 0 },\r\n                    size: { x: 0, y: 0, z: 0 },\r\n                },\r\n                metadata: {\r\n                    format: 'mock',\r\n                    created: new Date(),\r\n                },\r\n            };\r\n\r\n            const result = loader.validateModel(invalidModel);\r\n            expect(result.valid).toBe(false);\r\n            expect(result.errors).toContainEqual(\r\n                expect.objectContaining({\r\n                    code: 'NO_MESHES',\r\n                })\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('readFileAsArrayBuffer', () => {\r\n        it('should read file as array buffer', async () => {\r\n            const content = 'test content';\r\n            const file = new File([content], 'test.mock');\r\n\r\n            // Access protected method through any type assertion\r\n            const buffer = await (loader as any).readFileAsArrayBuffer(file);\r\n\r\n            expect(buffer).toBeInstanceOf(ArrayBuffer);\r\n            expect(buffer.byteLength).toBe(content.length);\r\n        });\r\n    });\r\n});","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/model-loader/__tests__/ModelLoaderFactory.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/model-loader/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pipeline/PipelineFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pipeline/RenderPipeline.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pipeline/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/PixelProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/SimplePixelProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/__tests__/AlgorithmFactory.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[878,881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[878,881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// core/pixel-processor/__tests__/AlgorithmFactory.test.ts\r\nimport { AlgorithmFactory } from '../algorithms/AlgorithmFactory';\r\nimport { NearestNeighbor } from '../algorithms/NearestNeighbor';\r\nimport { BilinearPixel } from '../algorithms/BilinearPixel';\r\n\r\ndescribe('AlgorithmFactory', () => {\r\n    describe('create', () => {\r\n        it('should create NearestNeighbor algorithm', () => {\r\n            const algorithm = AlgorithmFactory.create('nearest-neighbor');\r\n            expect(algorithm).toBeInstanceOf(NearestNeighbor);\r\n        });\r\n\r\n        it('should create BilinearPixel algorithm', () => {\r\n            const algorithm = AlgorithmFactory.create('bilinear');\r\n            expect(algorithm).toBeInstanceOf(BilinearPixel);\r\n        });\r\n\r\n        it('should throw error for unknown algorithm', () => {\r\n            expect(() => AlgorithmFactory.create('unknown' as any)).toThrow('Unknown algorithm');\r\n        });\r\n    });\r\n\r\n    describe('getAvailableAlgorithms', () => {\r\n        it('should return list of available algorithms', () => {\r\n            const algorithms = AlgorithmFactory.getAvailableAlgorithms();\r\n            expect(algorithms).toContain('nearest-neighbor');\r\n            expect(algorithms).toContain('bilinear');\r\n        });\r\n    });\r\n});","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/__tests__/BilinearPixel.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/__tests__/NearestNeighbor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/__tests__/PixelProcessor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/algorithms/AlgorithmFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/algorithms/BilinearPixel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/algorithms/NearestNeighbor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/algorithms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/pixel-processor/palettes/PalettePresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/spritesheet-generator/SpritesheetGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/spritesheet-generator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/spritesheet-generator/layouts/GridLayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/spritesheet-generator/layouts/ILayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/spritesheet-generator/layouts/LayoutFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/spritesheet-generator/layouts/LinearLayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/core/spritesheet-generator/layouts/PackedLayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/di/Container.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[178,181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[178,181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[233,236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[233,236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// shared/di/Container.ts\r\nimport { IContainer } from '../interfaces/IContainer.ts';\r\n\r\nexport class DIContainer implements IContainer {\r\n    private services: Map<symbol, () => any> = new Map();\r\n    private singletons: Map<symbol, any> = new Map();\r\n\r\n    register<T>(token: symbol, factory: () => T): void {\r\n        this.services.set(token, factory);\r\n    }\r\n\r\n    registerSingleton<T>(token: symbol, factory: () => T): void {\r\n        this.services.set(token, () => {\r\n            if (!this.singletons.has(token)) {\r\n                this.singletons.set(token, factory());\r\n            }\r\n            return this.singletons.get(token);\r\n        });\r\n    }\r\n\r\n    resolve<T>(token: symbol): T {\r\n        const factory = this.services.get(token);\r\n        if (!factory) {\r\n            throw new Error(`Service not found: ${token.toString()}`);\r\n        }\r\n        return factory();\r\n    }\r\n\r\n    has(token: symbol): boolean {\r\n        return this.services.has(token);\r\n    }\r\n\r\n    clear(): void {\r\n        this.services.clear();\r\n        this.singletons.clear();\r\n    }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/di/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/di/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/di/tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/events/EventBus.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":12,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":12,"endColumn":32,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[397,398],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// shared/events/EventBus.ts\r\n\r\nimport {EventHandler, IEventBus} from \"@shared/interfaces\";\r\n\r\nexport class EventBus implements IEventBus {\r\n    private events: Map<string, Set<EventHandler>> = new Map();\r\n\r\n    on<T>(event: string, handler: EventHandler<T>): void {\r\n        if (!this.events.has(event)) {\r\n            this.events.set(event, new Set());\r\n        }\r\n        this.events.get(event)!.add(handler);\r\n    }\r\n\r\n    off<T>(event: string, handler: EventHandler<T>): void {\r\n        const handlers = this.events.get(event);\r\n        if (handlers) {\r\n            handlers.delete(handler);\r\n            if (handlers.size === 0) {\r\n                this.events.delete(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    emit<T>(event: string, data?: T): void {\r\n        const handlers = this.events.get(event);\r\n        if (handlers) {\r\n            handlers.forEach(handler => {\r\n                try {\r\n                    handler(data);\r\n                } catch (error) {\r\n                    console.error(`Error in event handler for ${event}:`, error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    once<T>(event: string, handler: EventHandler<T>): void {\r\n        const wrappedHandler: EventHandler<T> = (data) => {\r\n            handler(data);\r\n            this.off(event, wrappedHandler);\r\n        };\r\n        this.on(event, wrappedHandler);\r\n    }\r\n\r\n    clear(): void {\r\n        this.events.clear();\r\n    }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/events/events.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/events/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IAlgorithm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IContainer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IEventBus.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[66,69],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[66,69],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n// shared/interfaces/IEventBus.ts\r\nexport type EventHandler<T = any> = (data: T) => void;\r\n\r\nexport interface IEventBus {\r\n    /**\r\n     * S'abonne à un événement\r\n     */\r\n    on<T>(event: string, handler: EventHandler<T>): void;\r\n\r\n    /**\r\n     * Se désabonne d'un événement\r\n     */\r\n    off<T>(event: string, handler: EventHandler<T>): void;\r\n\r\n    /**\r\n     * Émet un événement\r\n     */\r\n    emit<T>(event: string, data?: T): void;\r\n\r\n    /**\r\n     * S'abonne pour une seule occurrence\r\n     */\r\n    once<T>(event: string, handler: EventHandler<T>): void;\r\n}","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IExporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/ILayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IModelLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IPixelProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IPreset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IRenderer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/IWorker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[71,74],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[71,74],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[174,177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[174,177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n// shared/interfaces/IWorker.ts\r\nexport interface IWorkerMessage<T = any> {\r\n    id: string;\r\n    type: string;\r\n    payload: T;\r\n}\r\n\r\nexport interface IWorkerResponse<T = any> {\r\n    id: string;\r\n    success: boolean;\r\n    result?: T;\r\n    error?: string;\r\n}\r\n\r\nexport interface IWorkerPool {\r\n    /**\r\n     * Exécute une tâche sur un worker disponible\r\n     */\r\n    execute<T, R>(task: IWorkerMessage<T>): Promise<R>;\r\n\r\n    /**\r\n     * Termine tous les workers\r\n     */\r\n    terminate(): void;\r\n\r\n    /**\r\n     * Retourne le nombre de workers actifs\r\n     */\r\n    getActiveCount(): number;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/interfaces/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/types/app.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/types/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/types/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/types/pixelart.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/types/presets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/types/rendering.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/utils/color.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/utils/id.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/utils/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[287,290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[287,290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":17,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":17,"endColumn":26,"suggestions":[{"fix":{"range":[360,412],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[469,472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[469,472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":23,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":23,"endColumn":25,"suggestions":[{"fix":{"range":[541,592],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[649,652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[649,652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[830,833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[830,833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// shared/utils/logger.ts\r\nexport enum LogLevel {\r\n    DEBUG = 0,\r\n    INFO = 1,\r\n    WARN = 2,\r\n    ERROR = 3,\r\n}\r\n\r\nexport class Logger {\r\n    constructor(\r\n        private name: string,\r\n        private level: LogLevel = LogLevel.INFO\r\n    ) {}\r\n\r\n    debug(message: string, ...args: any[]): void {\r\n        if (this.level <= LogLevel.DEBUG) {\r\n            console.debug(`[${this.name}] ${message}`, ...args);\r\n        }\r\n    }\r\n\r\n    info(message: string, ...args: any[]): void {\r\n        if (this.level <= LogLevel.INFO) {\r\n            console.info(`[${this.name}] ${message}`, ...args);\r\n        }\r\n    }\r\n\r\n    warn(message: string, ...args: any[]): void {\r\n        if (this.level <= LogLevel.WARN) {\r\n            console.warn(`[${this.name}] ${message}`, ...args);\r\n        }\r\n    }\r\n\r\n    error(message: string, ...args: any[]): void {\r\n        if (this.level <= LogLevel.ERROR) {\r\n            console.error(`[${this.name}] ${message}`, ...args);\r\n        }\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/utils/math.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/utils/performance.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":15,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":15,"endColumn":22,"suggestions":[{"fix":{"range":[475,540],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// shared/utils/performance.ts\r\nexport class PerformanceMonitor {\r\n    private marks: Map<string, number> = new Map();\r\n\r\n    mark(name: string): void {\r\n        this.marks.set(name, performance.now());\r\n    }\r\n\r\n    measure(name: string, startMark: string): number {\r\n        const start = this.marks.get(startMark);\r\n        if (!start) {\r\n            throw new Error(`Mark ${startMark} not found`);\r\n        }\r\n        const duration = performance.now() - start;\r\n        console.debug(`[Performance] ${name}: ${duration.toFixed(2)}ms`);\r\n        return duration;\r\n    }\r\n\r\n    clear(): void {\r\n        this.marks.clear();\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/shared/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/App.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'model'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":75,"suggestions":[{"desc":"Update the dependencies array to be: [pixelSettings.targetSize, pixelSettings.colorPalette, handleProcess, model]","fix":{"range":[2612,2681],"text":"[pixelSettings.targetSize, pixelSettings.colorPalette, handleProcess, model]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/App.tsx - Version entièrement corrigée\nimport { useState, useCallback, useEffect } from 'react';\nimport { AppProvider, useAppContext } from '../ui/contexts/AppContext';\nimport {\n  ModelViewer3D,\n  PixelPreview,\n  FileUpload,\n  PresetSelector,\n  SettingsPanel,\n} from '../ui/components';\nimport { useModelLoader } from \"@ui/hooks/useModelLoader\";\nimport { usePixelProcessor } from \"@ui/hooks/usePixelProcessor\";\nimport { useExporter } from \"@ui/hooks/useExporter\";\nimport { ThreeRenderer } from '@rendering/three-renderer';\nimport { Download, Settings, Camera, Grid3x3 } from 'lucide-react';\n\nfunction AppContent() {\n  const {\n    model,\n    setModel,\n    camera,\n    setCamera,\n    cameraPresets,\n    selectedPresetId,\n    applyPreset,\n    renderSettings,\n    pixelSettings,\n    setPixelSettings,\n    exportSettings,\n    setExportSettings,\n    processedFrames,\n    setProcessedFrames,\n  } = useAppContext();\n\n  const { loadModel } = useModelLoader();\n  const { processImage, isProcessing } = usePixelProcessor();\n  const { exportFrames, isExporting } = useExporter();\n\n  const [renderer] = useState(() => new ThreeRenderer());\n  const [activeTab, setActiveTab] = useState<'model' | 'settings'>('model');\n  const [showGrid, setShowGrid] = useState(true);\n\n  // Handle file upload\n  const handleFileSelect = useCallback(async (file: File) => {\n    const loadedModel = await loadModel(file);\n    if (loadedModel !== null) { // Vérification explicite contre null\n      setModel(loadedModel);\n    }\n  }, [loadModel, setModel]);\n\n  // Process current view - useCallback avec toutes les dépendances\n  const handleProcess = useCallback(async () => {\n    if (!model) return;\n\n    // Create render canvas\n    const canvas = document.createElement('canvas');\n    canvas.width = 512;\n    canvas.height = 512;\n\n    // Initialize renderer\n    renderer.initialize(canvas);\n    renderer.updateSettings(renderSettings);\n\n    // Render frame\n    const result = renderer.render(model, camera);\n\n    // Process to pixel art\n    const processed = await processImage(result.image, pixelSettings);\n    if (processed) {\n      setProcessedFrames([processed]);\n    }\n  }, [model, camera, renderSettings, pixelSettings, renderer, processImage, setProcessedFrames]);\n\n  // Export spritesheet\n  const handleExport = useCallback(async () => {\n    if (processedFrames.length === 0) return;\n\n    await exportFrames(processedFrames, exportSettings);\n  }, [processedFrames, exportSettings, exportFrames]);\n\n  // Auto-process on settings change - Dépendances corrigées\n  useEffect(() => {\n    if (model) {\n      handleProcess();\n    }\n  }, [pixelSettings.targetSize, pixelSettings.colorPalette, handleProcess]);\n\n  return (\n      <div className=\"min-h-screen bg-gray-900 text-white\">\n        {/* Header */}\n        <header className=\"bg-gray-800 shadow-lg\">\n          <div className=\"container mx-auto px-4 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text text-transparent\">\n                  3D to Pixel Art Converter\n                </h1>\n                <p className=\"text-gray-400 text-sm\">Transform 3D models into retro sprites</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <button\n                    onClick={() => setShowGrid(!showGrid)}\n                    className=\"p-2 rounded hover:bg-gray-700 transition-colors\"\n                    title=\"Toggle grid\"\n                >\n                  <Grid3x3 className=\"w-5 h-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"container mx-auto px-4 py-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Left Panel - Model/Settings */}\n            <div className=\"lg:col-span-1 space-y-6\">\n              {!model ? (\n                  <div className=\"bg-gray-800 rounded-lg p-6 shadow-xl\">\n                    <h2 className=\"text-xl font-semibold mb-4\">Upload Model</h2>\n                    <FileUpload\n                        accept=\".glb,.gltf\"\n                        onFileSelect={handleFileSelect}\n                        maxSize={50}\n                    />\n                  </div>\n              ) : (\n                  <div className=\"bg-gray-800 rounded-lg shadow-xl\">\n                    <div className=\"flex border-b border-gray-700\">\n                      <button\n                          onClick={() => setActiveTab('model')}\n                          className={`flex-1 px-4 py-3 font-medium transition-colors ${\n                              activeTab === 'model'\n                                  ? 'text-purple-400 border-b-2 border-purple-400'\n                                  : 'text-gray-400 hover:text-white'\n                          }`}\n                      >\n                        <Camera className=\"w-4 h-4 inline mr-2\" />\n                        View\n                      </button>\n                      <button\n                          onClick={() => setActiveTab('settings')}\n                          className={`flex-1 px-4 py-3 font-medium transition-colors ${\n                              activeTab === 'settings'\n                                  ? 'text-purple-400 border-b-2 border-purple-400'\n                                  : 'text-gray-400 hover:text-white'\n                          }`}\n                      >\n                        <Settings className=\"w-4 h-4 inline mr-2\" />\n                        Settings\n                      </button>\n                    </div>\n\n                    <div className=\"p-6\">\n                      {activeTab === 'model' ? (\n                          <div className=\"space-y-6\">\n                            <div>\n                              <h3 className=\"text-lg font-semibold mb-4\">Camera Presets</h3>\n                              <PresetSelector\n                                  presets={cameraPresets}\n                                  selectedPresetId={selectedPresetId}\n                                  onPresetSelect={applyPreset}\n                              />\n                            </div>\n\n                            <div>\n                              <p className=\"text-sm text-gray-400 mb-2\">\n                                Model: {model.meshes.length} meshes, {model.animations.length} animations\n                              </p>\n                              <button\n                                  onClick={() => setModel(null)}\n                                  className=\"text-sm text-red-400 hover:text-red-300\"\n                              >\n                                Remove model\n                              </button>\n                            </div>\n                          </div>\n                      ) : (\n                          <SettingsPanel\n                              pixelSettings={pixelSettings}\n                              exportSettings={exportSettings}\n                              onPixelSettingsChange={setPixelSettings}\n                              onExportSettingsChange={setExportSettings}\n                          />\n                      )}\n                    </div>\n                  </div>\n              )}\n            </div>\n\n            {/* Center - 3D Viewer */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-gray-800 rounded-lg p-6 shadow-xl\">\n                <h2 className=\"text-xl font-semibold mb-4\">3D Model</h2>\n                <ModelViewer3D\n                    model={model}\n                    camera={camera}\n                    width={400}\n                    height={400}\n                    showHelpers={showGrid}\n                    onCameraChange={setCamera}\n                />\n              </div>\n            </div>\n\n            {/* Right - Pixel Preview */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-gray-800 rounded-lg p-6 shadow-xl\">\n                <h2 className=\"text-xl font-semibold mb-4\">Pixel Art Preview</h2>\n                <div className=\"flex justify-center\">\n                  <PixelPreview\n                      frame={processedFrames[0] || null}\n                      scale={4}\n                      showGrid={showGrid}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"mt-8 flex justify-center space-x-4\">\n            <button\n                onClick={handleProcess}\n                disabled={!model || isProcessing}\n                className=\"bg-purple-600 hover:bg-purple-700 disabled:bg-gray-700 disabled:text-gray-500 text-white font-bold py-3 px-8 rounded-lg shadow-lg transform transition hover:scale-105 disabled:hover:scale-100\"\n            >\n              {isProcessing ? 'Processing...' : 'Generate Pixel Art'}\n            </button>\n\n            <button\n                onClick={handleExport}\n                disabled={processedFrames.length === 0 || isExporting}\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 disabled:from-gray-700 disabled:to-gray-700 disabled:text-gray-500 text-white font-bold py-3 px-8 rounded-lg shadow-lg transform transition hover:scale-105 disabled:hover:scale-100 flex items-center\"\n            >\n              <Download className=\"w-5 h-5 mr-2\" />\n              {isExporting ? 'Exporting...' : 'Download Spritesheet'}\n            </button>\n          </div>\n        </main>\n      </div>\n  );\n}\n\nfunction App() {\n  return (\n      <AppProvider>\n        <AppContent />\n      </AppProvider>\n  );\n}\n\nexport default App;","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":19,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":19,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/main.tsx - Version corrigée\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\n// Ensure Three.js imports work\nimport * as THREE from 'three'\n\n// Type window extension properly\ndeclare global {\n    interface Window {\n        THREE: typeof THREE;\n    }\n}\n\nwindow.THREE = THREE;\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n)","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/src/three.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/components/controls/FileUpload/FileUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/components/controls/PresetSelector/PresetSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/components/controls/SettingsPanel/SettingsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/components/controls/Slider/Slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/components/viewers/ModelViewer3D/ModelViewer3D.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'mountRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'mountRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":125,"column":26,"nodeType":"Identifier","endLine":125,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'camera' and 'onCameraChange'. Either include them or remove the dependency array. If 'onCameraChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":129,"column":8,"nodeType":"ArrayExpression","endLine":129,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [width, height, showHelpers, camera, onCameraChange]","fix":{"range":[4547,4575],"text":"[width, height, showHelpers, camera, onCameraChange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// ui/components/viewers/ModelViewer3D/ModelViewer3D.tsx\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Model3D, Camera } from '@shared/types';\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\ninterface ModelViewer3DProps {\r\n    model: Model3D | null;\r\n    camera: Camera;\r\n    width?: number;\r\n    height?: number;\r\n    showHelpers?: boolean;\r\n    onCameraChange?: (camera: Camera) => void;\r\n}\r\n\r\nexport function ModelViewer3D({\r\n                                  model,\r\n                                  camera,\r\n                                  width = 400,\r\n                                  height = 400,\r\n                                  showHelpers = false,\r\n                                  onCameraChange,\r\n                              }: ModelViewer3DProps) {\r\n    const mountRef = useRef<HTMLDivElement>(null);\r\n    const sceneRef = useRef<{\r\n        scene: THREE.Scene;\r\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera;\r\n        renderer: THREE.WebGLRenderer;\r\n        controls: OrbitControls;\r\n    } | null>(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!mountRef.current) return;\r\n\r\n        // Initialize Three.js scene\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(0x1a1a1a);\r\n\r\n        // Create camera\r\n        const aspect = width / height;\r\n        let threeCamera: THREE.PerspectiveCamera | THREE.OrthographicCamera;\r\n\r\n        if (camera.type === 'perspective') {\r\n            threeCamera = new THREE.PerspectiveCamera(\r\n                camera.fov,\r\n                aspect,\r\n                camera.near,\r\n                camera.far\r\n            );\r\n        } else {\r\n            const size = camera.orthographicSize || 10;\r\n            threeCamera = new THREE.OrthographicCamera(\r\n                -size * aspect / 2,\r\n                size * aspect / 2,\r\n                size / 2,\r\n                -size / 2,\r\n                camera.near,\r\n                camera.far\r\n            );\r\n        }\r\n\r\n        threeCamera.position.set(camera.position.x, camera.position.y, camera.position.z);\r\n        threeCamera.quaternion.set(camera.rotation.x, camera.rotation.y, camera.rotation.z, camera.rotation.w);\r\n\r\n        // Create renderer\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(width, height);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        mountRef.current.appendChild(renderer.domElement);\r\n\r\n        // Add controls\r\n        const controls = new OrbitControls(threeCamera, renderer.domElement);\r\n        controls.enableDamping = true;\r\n        controls.dampingFactor = 0.05;\r\n\r\n        controls.addEventListener('change', () => {\r\n            if (onCameraChange) {\r\n                onCameraChange({\r\n                    ...camera,\r\n                    position: {\r\n                        x: threeCamera.position.x,\r\n                        y: threeCamera.position.y,\r\n                        z: threeCamera.position.z,\r\n                    },\r\n                    rotation: {\r\n                        x: threeCamera.quaternion.x,\r\n                        y: threeCamera.quaternion.y,\r\n                        z: threeCamera.quaternion.z,\r\n                        w: threeCamera.quaternion.w,\r\n                    },\r\n                });\r\n            }\r\n        });\r\n\r\n        // Add lights\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n        scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n        directionalLight.position.set(5, 5, 5);\r\n        scene.add(directionalLight);\r\n\r\n        // Add helpers if requested\r\n        if (showHelpers) {\r\n            const gridHelper = new THREE.GridHelper(10, 10);\r\n            scene.add(gridHelper);\r\n\r\n            const axesHelper = new THREE.AxesHelper(5);\r\n            scene.add(axesHelper);\r\n        }\r\n\r\n        sceneRef.current = { scene, camera: threeCamera, renderer, controls };\r\n\r\n        // Animation loop\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            controls.update();\r\n            renderer.render(scene, threeCamera);\r\n        };\r\n        animate();\r\n\r\n        return () => {\r\n            if (mountRef.current && renderer.domElement) {\r\n                mountRef.current.removeChild(renderer.domElement);\r\n            }\r\n            renderer.dispose();\r\n        };\r\n    }, [width, height, showHelpers]);\r\n\r\n    // Update model\r\n    useEffect(() => {\r\n        if (!sceneRef.current || !model) return;\r\n\r\n        setIsLoading(true);\r\n        const { scene } = sceneRef.current;\r\n\r\n        // Remove existing models\r\n        const modelsToRemove = scene.children.filter(\r\n            child => child.userData.isModel\r\n        );\r\n        modelsToRemove.forEach(child => scene.remove(child));\r\n\r\n        // Add new model\r\n        const modelGroup = new THREE.Group();\r\n        modelGroup.userData.isModel = true;\r\n\r\n        // Create materials\r\n        const materials = new Map<string, THREE.Material>();\r\n        model.materials.forEach(mat => {\r\n            const material = new THREE.MeshStandardMaterial({\r\n                color: new THREE.Color(mat.color.r / 255, mat.color.g / 255, mat.color.b / 255),\r\n                opacity: mat.opacity,\r\n                transparent: mat.opacity < 1,\r\n                metalness: mat.metalness || 0,\r\n                roughness: mat.roughness || 1,\r\n            });\r\n            materials.set(mat.id, material);\r\n        });\r\n\r\n        // Create meshes\r\n        model.meshes.forEach(mesh => {\r\n            const geometry = new THREE.BufferGeometry();\r\n            geometry.setAttribute('position', new THREE.BufferAttribute(mesh.vertices, 3));\r\n            geometry.setAttribute('normal', new THREE.BufferAttribute(mesh.normals, 3));\r\n            geometry.setAttribute('uv', new THREE.BufferAttribute(mesh.uvs, 2));\r\n\r\n            if (mesh.indices) {\r\n                geometry.setIndex(new THREE.BufferAttribute(mesh.indices, 1));\r\n            }\r\n\r\n            const material = mesh.materialId\r\n                ? materials.get(mesh.materialId)\r\n                : new THREE.MeshStandardMaterial();\r\n\r\n            const threeMesh = new THREE.Mesh(geometry, material || new THREE.MeshStandardMaterial());\r\n            modelGroup.add(threeMesh);\r\n        });\r\n\r\n        // Center model\r\n        const box = new THREE.Box3().setFromObject(modelGroup);\r\n        const center = box.getCenter(new THREE.Vector3());\r\n        modelGroup.position.sub(center);\r\n\r\n        scene.add(modelGroup);\r\n        setIsLoading(false);\r\n    }, [model]);\r\n\r\n    // Update camera\r\n    useEffect(() => {\r\n        if (!sceneRef.current) return;\r\n\r\n        const { camera: threeCamera } = sceneRef.current;\r\n        threeCamera.position.set(camera.position.x, camera.position.y, camera.position.z);\r\n        threeCamera.quaternion.set(camera.rotation.x, camera.rotation.y, camera.rotation.z, camera.rotation.w);\r\n    }, [camera]);\r\n\r\n    return (\r\n        <div className=\"relative\" style={{ width, height }}>\r\n            <div ref={mountRef} style={{ width: '100%', height: '100%' }} />\r\n            {isLoading && (\r\n                <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n                    <div className=\"text-white\">Loading model...</div>\r\n                </div>\r\n            )}\r\n            {!model && (\r\n                <div className=\"absolute inset-0 flex items-center justify-center text-gray-500\">\r\n                    No model loaded\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}","usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/components/viewers/ModelViewer3D/PixelPreview/PixelPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/contexts/AppContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/hooks/useExporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/hooks/useModelLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/chris/dev/projects/ITER/3d-to-pixelart-converter/ui/hooks/usePixelProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]